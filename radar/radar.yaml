substitutions:
  devicename: "radar"
  friendly_name: "Radar"
  # update_time: 30s
  project_name: "radar"
  version: "1.0"
  
esphome:
  name: $devicename
  friendly_name: $friendly_name
  name_add_mac_suffix: true
  project:
    name: xio.$project_name
    version: $version
  on_boot:    #LD1125H Initial Setting
    priority: -200
    then:
      - uart.write:
          id: uart_bus
          data: !lambda |-
            std::string th1st = "mth1=" + str_sprintf("%.0f",id(close_sensitivity).state) +"\r\n";
            return std::vector<uint8_t>(th1st.begin(), th1st.end());
      - uart.write:
          id: uart_bus
          data: !lambda |-
            std::string th2st = "mth2=" + str_sprintf("%.0f",id(middle_sensitivity).state) +"\r\n";
            return std::vector<uint8_t>(th2st.begin(), th2st.end());
      - uart.write:
          id: uart_bus
          data: !lambda |-
            std::string th3st = "mth3=" + str_sprintf("%.0f",id(far_sensitivity).state) +"\r\n";
            return std::vector<uint8_t>(th3st.begin(), th3st.end());
      - uart.write:
          id: uart_bus
          data: !lambda |-
            std::string rmaxst = "rmax=" + str_sprintf("%.1f",id(max_distance).state) +"\r\n";
            return std::vector<uint8_t>(rmaxst.begin(), rmaxst.end());

# temp sensor
# i2c:
#   sda: GPIO19
#   scl: GPIO21
#   scan: True

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components #Thanks for @ssieb components.
    components: [ serial ]

captive_portal:

dashboard_import:
  package_import_url: github://Xioshock/configs/radar/radar.yaml
  # import_full_config: false

api:
  
ota:

logger:
  #level: INFO  #You Can Use "INFO" Level
  baud_rate: 0

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  ap:
#  manual_ip:
#    static_ip: !secret ip_esp32mastbath
#    gateway: !secret ip_gateway
#    subnet: !secret ip_subnet
#    dns1: !secret ip_dns1

uart:
  id: uart_bus
  rx_pin: GPIO20  #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
  tx_pin: GPIO21  #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
#  rx_pin: GPIO1  #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
#  tx_pin: GPIO0 #For ESP32, you can use any pin, Recommend Use UART_2, Don't use UART_0, It might Cause Boot Fail or System Hang
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  # debug:
    # direction: BOTH
    # dummy_receiver: false
    # after:
    #   delimiter: "\n"
    # sequence:
    #   - lambda: UARTDebug::log_string(direction, bytes);

globals:
  - id: last_time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
  - id: last_movement_time
    type: time_t
    restore_value: no
    initial_value: time(NULL)
  - id: clearance_status
    type: bool
    restore_value: no
    initial_value: "false"
# status_led:
#   pin:
#     number: GPIO8 #ESP32 OnBroad LED
#     inverted: false
web_server:   #Avoid Using Web Server To Prevent Hang
 port: 80

interval:
  - interval: 1s #Clearance Scan Time
    setup_priority: -200
    then:
      lambda: |-
        if ((time(NULL) - id(last_time)) > id(presence_timeout).state) {
          if ((id(clearance_status) == false) || (id(occupancy).state != "Clearance")) {
            id(occupancy).publish_state("Clearance");
            id(clearance_status) = true;
          }

          if (id(presence).state == true) {
            id(presence).publish_state(false);
          }

          if (id(motion).state == true) {
            id(motion).publish_state(false);
          }
        }

number:
  - platform: template
    name: Close Sensitivity #mth1 is 0~2.8m Sensitivity.
    id: close_sensitivity
    icon: "mdi:cogs"
    optimistic: true
    internal: True
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "60.0" #Default mth1 Setting
    min_value: 10.0
    max_value: 600.0
    step: 5.0
    set_action:
      then:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string th1st = "mth1=" + str_sprintf("%.0f",x) +"\r\n";
              return std::vector<uint8_t>(th1st.begin(), th1st.end());
  - platform: template
    name: Middle Sensitivity #mth2 is 2.8~8m Sensitivity.
    id: middle_sensitivity
    icon: "mdi:cogs"
    internal: True
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "30" #Default mth2 Setting
    min_value: 5
    max_value: 300
    step: 5
    set_action:
      then:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string th2st = "mth2=" + str_sprintf("%.0f",x) +"\r\n";
              return std::vector<uint8_t>(th2st.begin(), th2st.end());
  - platform: template
    name: Far Sensitivity #mth3 is above 8m Sensitivity.
    id: far_sensitivity
    icon: "mdi:cogs"
    internal: True
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "20" #Default mth3 Setting
    min_value: 5
    max_value: 200
    step: 5
    set_action:
      then:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string th3st = "mth3=" + str_sprintf("%.0f",x) +"\r\n";
              return std::vector<uint8_t>(th3st.begin(), th3st.end());
  - platform: template
    name: ${friendly_name} Max Distance #rmax is max detection distance.
    id: max_distance
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "8" #Default rmax Setting
    min_value: 0.4
    max_value: 12
    step: 0.1
    set_action:
      then:
        - uart.write:
            id: uart_bus
            data: !lambda |-
              std::string rmaxst = "rmax=" + str_sprintf("%.1f",x) +"\r\n";
              return std::vector<uint8_t>(rmaxst.begin(), rmaxst.end());
  - platform: template
    name: ${friendly_name} Presence Timeout
    id: presence_timeout
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "5" #LD1125H Mov/Occ > Clearence Time Here
    min_value: 0.5
    max_value: 20
    step: 0.5
  - platform: template
    name: ${friendly_name} Motion Timeout
    id: motion_timeout
    icon: "mdi:cogs"
    optimistic: true
    restore_value: true #If you don't want to store the setting at ESP, set it to false.
    initial_value: "1" #LD1125H Mov > Occ Time Here
    min_value: 0.5
    max_value: 10
    step: 0.5

sensor:
  # - platform: bme280
  #   temperature:
  #     name: BME280 Temp
  #     accuracy_decimals: 1     
  #     oversampling: 2x
  #   pressure:
  #     name: BME280 Pressure
  #     oversampling: 2x
  #   humidity:
  #     name: BME280 Humidity
  #     accuracy_decimals: 1     
  #     oversampling: 2x
  #   address: 0x76
  #   update_interval: ${update_time}
#  - platform: aht10
#    temperature:
#      accuracy_decimals: 2     
#      name: AHT21 Temp
#    humidity:
#      accuracy_decimals: 2     
#      name: AHT21 Humidity
#    update_interval: ${update_time}     
#  - platform: wifi_signal
#    name: WiFi Signal
#    update_interval: 60s
  - platform: template
    name: ${friendly_name} Distance
    id: distance
    icon: "mdi:signal-distance-variant"
    unit_of_measurement: "m"
    accuracy_decimals: 2
    filters:    # Use Fliter To Debounce
    - sliding_window_moving_average:
        window_size: 8
        send_every: 2
    - heartbeat: 0.2s

text_sensor:
  - platform: serial
    uart_id: uart_bus
    name: UART Text
    id: uart_text
    icon: "mdi:format-text"
    internal: True #If Don't Want to See UART Receive Data, Set To True
    on_value:
      lambda: |-
        if (id(uart_text).state.substr(0,3) == "occ" || id(uart_text).state.substr(0,3) == "mov") {
          id(distance).publish_state(atof(id(uart_text).state.substr(9).c_str()));
        }

        if (id(uart_text).state.substr(0,3) == "occ" && id(distance).state <= id(max_distance).state) {
          if ((time(NULL) - id(last_movement_time)) > id(motion_timeout).state) {
            id(occupancy).publish_state("Occupancy");

            if (id(presence).state == false) {
              id(presence).publish_state(true);
            }

            if (id(motion).state == true) {
              id(motion).publish_state(false);
            }
          }

          if (id(presence).state == false) {
            id(presence).publish_state(true);
          }

          id(last_time) = time(NULL);

          if (id(clearance_status) == true) {
            id(clearance_status) = false;
          }
        }
        else if (id(uart_text).state.substr(0,3) == "mov" && id(distance).state <= id(max_distance).state) {
          id(occupancy).publish_state("Movement");

          if (id(presence).state == false) {
            id(presence).publish_state(true);
          }

          if (id(motion).state == false) {
            id(motion).publish_state(true);
          }

          id(last_movement_time) = time(NULL);

          id(last_time) = time(NULL);

          if (id(clearance_status) == true) {
            id(clearance_status) = false;
          }
        }
  - platform: template
    name: ${friendly_name} Occupancy
    id: occupancy
    internal: True
    icon: "mdi:motion-sensor"

binary_sensor:
  - platform: template
    name: ${friendly_name} Presence
    id: presence
    device_class: occupancy
  - platform: template
    name: ${friendly_name} Motion
    id: motion
    device_class: motion
# button:
#   - platform: template
#     name: "Get all"
#     on_press:
#       - uart.write:
#           id: uart_bus
#           data: !lambda |-
#             std::string getAll = "get_all\r\n";
#             return std::vector<uint8_t>(getAll.begin(), getAll.end());